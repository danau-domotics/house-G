import org.eclipse.smarthome.model.script.ScriptServiceUtil
import org.openhab.core.thing.ThingRegistry


// Checked when recent errors changed, and once every half a minute
rule "Health responses"
when
	Item Recent_Errors changed or
	Time cron "0/30 * * ? * * *"
then
	if(Home_SystemStatus.state == NULL){
		Home_SystemStatus.sendCommand("OK");
	}
	else if(Recent_Errors.state < 1){
		if(Home_SystemStatus.state != "OK"){
			Home_SystemStatus.sendCommand("OK");
		}
	}
	// If we have errors for 5 minutes or more, then take action.
	else if(Recent_Errors.state > 30)
	{
		if(Home_SystemStatus.state != "!! Storing !!"){
			Home_SystemStatus.sendCommand("!! Storing !!");
		}
	}
end



rule "OneWire Offline Tracking"
when
	Time cron "0/10 * * ? * * *"
then
	// Check if we should measure offline time
	if(Zmeasurements_measureOfflineTime.state == NULL){
		Zmeasurements_measureOfflineTime.sendCommand(OFF)
		return;
	}

	val things = ScriptServiceUtil.getInstance.thingRegistry.getAll()
	things.forEach[theThing |
		val trackerNameSplit = theThing.getUID().toString().split(":")
		if(trackerNameSplit.length == 4){		
			// Tracker for recent downtime
			val recentTrackerName = trackerNameSplit.get(3) + "_recentOffline";
			val recentTrackerItem = ScriptServiceUtil.getItemRegistry.getItem(recentTrackerName);

			if(recentTrackerItem.state == NULL){
				recentTrackerItem.sendCommand(0);
			}
			else if(theThing.getStatus().toString().equals("OFFLINE")){
				if(recentTrackerItem.state < 360){
					recentTrackerItem.sendCommand((recentTrackerItem.state as Number) + 1);
				}
			}
			else if(recentTrackerItem.state > 0){
				recentTrackerItem.sendCommand(0);
			}

			if(Zmeasurements_measureOfflineTime.state != OFF){
				// Tracker for total downtime
				val trackerName = trackerNameSplit.get(3) + "_totalOffline";
				val trackerItem = ScriptServiceUtil.getItemRegistry.getItem(trackerName);

				if(trackerItem.state == NULL){
					trackerItem.sendCommand(0);
				}
				else if(theThing.getStatus().toString().equals("OFFLINE")){
					trackerItem.sendCommand((trackerItem.state as Number) + 1);
				}
			}
		}
	]

	// Keep track of the total amount of measurements
	if(Zmeasurements_measureOfflineTime.state != OFF){
		if(Zmeasurements_totalOffline.state == NULL){
			Zmeasurements_totalOffline.sendCommand(0);
		}
		else {
			Zmeasurements_totalOffline.sendCommand((Zmeasurements_totalOffline.state as Number) + 1);
		}
	}
end
