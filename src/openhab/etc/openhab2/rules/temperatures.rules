import org.eclipse.smarthome.model.script.ScriptServiceUtil

// Deltas for hysteresis, to avoid pendelling of pump
var Number   hysterDelta = 0.2

// Delta for automatic control decissions
// No decissions are made if the delta is smaller than the numbers here.
var Number   autoModeDelta = 2

// Temperature at which to activate protection against freezing
var Number   freezeProtection = 8


rule "Switched to non-manual system mode"
when
	Item Home_Mode changed to heat or
	Item Home_Mode changed to cool or
	Item Home_Mode changed to auto or
	Item Home_Mode changed to ""
then
	// Initialize manual groups to off
	// They can be manually re-activated when required.
	GF_GarageRad_Circulate.sendCommand(OFF)
	GF_HallwayRad_Circulate.sendCommand(OFF)
	FF_BathroomRad_Circulate.sendCommand(OFF)
	FF_LaundryRoomRad_Circulate.sendCommand(OFF)
end


rule "Room Thermostat Updates"
when
	Member of Setpoints received update or
	Member of Temperature_Primary changed
then
	// Get the base-name of the room we are controlling.
	var String baseName = triggeringItem.name.toString.replaceAll("_RoomTemp", "").replaceAll("_SetpointHeat", "").replaceAll("_SetpointCool", "").replaceAll("_Return", "");
	
	// Get the corresponding temperature sensor item
	var String tempSensorName = baseName + "_RoomTemp";
	var tempSensorItem = ScriptServiceUtil.getItemRegistry.getItem(tempSensorName);
	if(tempSensorItem === null){
		logError("temperatures.rules", "Temperature sensor {} not found!", tempSensorName);
		return;
	}
	
	// Get the corresponding setpoint item for heating
	var String setpointHeatName = baseName + "_SetpointHeat";
	var setpointHeatItem = ScriptServiceUtil.getItemRegistry.getItem(setpointHeatName);
	if(setpointHeatItem === null){
		logError("temperatures.rules", "Setpoint item {} not found!", setpointHeatName);
		return;
	}
	// Get the corresponding setpoint item for cooling
	var String setpointCoolName = baseName + "_SetpointCool";
	var setpointCoolItem = ScriptServiceUtil.getItemRegistry.getItem(setpointCoolName);
	if(setpointCoolItem === null){
		logError("temperatures.rules", "Setpoint item {} not found!", setpointCoolName);
		return;
	}
	var String circulateName = baseName + "_Circulate";
	var circulateItem = ScriptServiceUtil.getItemRegistry.getItem(circulateName);
	if(circulateItem === null){
		logError("temperatures.rules", "Circulate item {} not found!", circulateName);
		return;
	}
	if(circulateItem.state != ON && circulateItem.state != OFF){
		logError("temperatures.rules", "Initializing circulate item {} to OFF!", circulateName);
		circulateItem.sendCommand(OFF);
		return;
	}

	var Number setpointHeat = setpointHeatItem.state;
	var Number setpointCool = setpointCoolItem.state;
	var Number tempRead = tempSensorItem.state;

	// Keep doing what we were doing, except when overruled by cooling or heating limits.
	var didCirculate = circulateItem.state;
	var doCirculate = didCirculate;

	// Don't do any active control if manual control is active.
	if(Home_Mode.state.toString().equals("manual"))
	{
		return;
	}
	else if(tempRead + hysterDelta <= freezeProtection )
	{
		if(doCirculate == OFF)
			logInfo("temperatures.rules", "Freezing protection active for {}", baseName);
		// Protection against freezing has priority over all else.
		doCirculate = ON;
	}
	else if(tempRead === null)
	{
		logError("temperatures.rules", "No known temperature for {}!", baseName);
		doCirculate = OFF;
	}
	else if(setpointHeat === null)
	{
		logError("temperatures.rules", "No valid heating setpoint for {}!", baseName);
		doCirculate = OFF;
	}
	else if(Home_Mode.state.toString().equals("heat"))
	{
		if(tempRead + hysterDelta < setpointHeatItem.state)
			doCirculate = ON;
		if(tempRead - hysterDelta > setpointHeatItem.state)
			doCirculate = OFF;
	}
	else if(setpointCool === null)
	{
		logError("temperatures.rules", "No valid cooling setpoint for {}!", baseName);
		doCirculate = OFF;
	}
	else if(Home_Mode.state.toString().equals("cool"))
	{
		if(tempRead - hysterDelta > setpointCoolItem.state)
			doCirculate = ON;
		if(tempRead + hysterDelta < setpointCoolItem.state)
			doCirculate = OFF;
	}
	else if(Home_Mode.state.toString().equals("auto"))
	{
		// Are we above the minimum heating temperature?
		if(tempRead - hysterDelta > setpointHeatItem.state){
			doCirculate = OFF;
		}
		// Are we below the minimum cooling temperature?
		else if(tempRead + hysterDelta < setpointCoolItem.state){
			doCirculate = OFF;
		}
		else {
			// Read the source temperature for checking what we can do.
			var Number supplyTemp = Home_SupplyTemp.state;

			// Do we want heating?
			if(tempRead + hysterDelta < setpointHeatItem.state){
				// Can we do heating?
				if(supplyTemp - autoModeDelta > tempRead){
					doCirculate = ON;
				}
				else {
					doCirculate = OFF;
				}
			}
			// Do we want cooling?
			else if(tempRead - hysterDelta > setpointCoolItem.state){
				// Can we do cooling?
				if(supplyTemp + autoModeDelta < tempRead){
					doCirculate = ON;
				}
				else {
					doCirculate = OFF;
				}
			}
		}
	}
	else if(tempRead - hysterDelta > freezeProtection)
	{
		// No circulation if we are not heating (regular or freeze-protection) or cooling
		doCirculate = OFF;
	}
	
	if(didCirculate != doCirculate){
		logInfo("temperatures.rules", "Setting {} to {}", circulateItem.name, doCirculate);
		sendCommand(circulateItem.name, doCirculate.toString)
	}
end
