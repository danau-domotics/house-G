#!/usr/bin/env python3

# Climate control sensors reading program
# Automatically reads sensor data at regular intervals and publishes values

# Connects to MQTT, reads all connected sensors and publishes temperatures on MQTT

###################################
# Imports for supporting libraries
#################################
import os
import paho.mqtt.client as mqtt
import signal
import time
from socket import gethostname



####################
# Default constants
##################
w1_sensors_directory = "/sys/bus/w1/devices/"
seconds_between_data_collections = 120



#########################
# Command line variables
#######################
my_controller_name = gethostname()
mqtt_client_id     = my_controller_name + "_slimat_sensors"
mqtt_server_host   = "192.168.50.20"



####################
# Runtime variables
##################
continue_running = True
mqtt_client = None
mqtt_is_connected = False      # Variable that tells us if we need to reconnect



####################
# Support functions
##################

def sensors_on_connect(client, userdata, flags, result_code):
	'''
	Callback for when the mqtt client made a connection with the server
	'''
	global mqtt_client_id
	global mqtt_is_connected
	mqtt_is_connected = True
	send_output("INFO", mqtt_client_id + ": Connected with result code " + str(result_code))

def sensors_on_disconnect(client, userdata, rc):
	global mqtt_client_id
	global mqtt_is_connected
	send_output("DEBUG", mqtt_client_id + ": Disconnected with reason " + rc)
	mqtt_is_connected = False

def send_output(output_type, output_text, indent=0):
	'''
	Output to console (or webpage, or mmqt message, or other)
	'''
	print(str(output_type) + ": " + str(output_text))



def get_connected_w1_temperature_sensors():
	'''
	Get a list of connected One-Wire temperature sensors
	'''
	subdirs = []
	subentries = os.listdir(w1_sensors_directory)
	for subentry in subentries:
		if os.path.isdir(w1_sensors_directory + "/" + subentry) and ("28-" in subentry):
			subdirs.append(subentry)
	return subdirs

def read_temperature(sensor_id):
	'''
	Read the temperature from a certain sensor with the id given
	'''
	temp_file = open(w1_sensors_directory + "/" + sensor_id+ "/w1_slave")
	sensor_data = temp_file.read()
	temp_file.close()
	# TODO: check the CRC (from the 1st line)

	# Take the 9th word from the 2nd line
	temp_value = sensor_data.split("\n")[1].split(" ")[9]

	# Check if word starts with t=
	if temp_value[0:2] != "t=":
		send_output("ERROR", "read invalid temperature " + temp_value + " for sensor " +sensor_id)
		send_output("DEBUG", "Input data was:\n"+ str(sensor_data) + "\n")
		return None
	else:
		temp_value=float(temp_value[2:])/1000
		
	return temp_value



def collect_and_transmit():
	global mqtt_client
	global continue_running

	sensors = get_connected_w1_temperature_sensors()
	for sensor in sensors:
		# Check if we still need to proceed collecting data
		if not continue_running:
			break
		temp = read_temperature(sensor)
		send_output("INFO", "Publishing temperature " + str(temp) + " C for 1-wire sensor " + sensor)
		mqtt_client.publish("sensor/one-wire/" + sensor + "/temperature", payload=str(temp))
	
	send_output("DEBUG", "Done read and publish loop")



def terminate_program(signal, stack_frame):
	global continue_running
	send_output("DEBUG", "Signalling termination")
	continue_running = False



################
# Main function
##############

send_output("DEBUG", "Install signalhandlers to allow program to terminate gracefully")
signal.signal(signal.SIGTERM, terminate_program)
signal.signal(signal.SIGINT, terminate_program)
signal.signal(signal.SIGQUIT, terminate_program)

send_output("INFO", "Start MQTT main loop")
mqtt_client = mqtt.Client(mqtt_client_id)
mqtt_client.on_connect = sensors_on_connect
mqtt_client.on_disconnect = sensors_on_disconnect
mqtt_client.connect(mqtt_server_host)
mqtt_client.loop(1.0)

send_output("DEBUG", "Start main data collection loop")
while continue_running:
	if not mqtt_is_connected:
		send_output("DEBUG", mqtt_client_id + ": Not connected, reconnecting in 5 seconds")
		time.sleep(5)
		send_output("DEBUG", mqtt_client_id + ": Not connected, reconnecting")
		mqtt_client.reconnect()
	# Re-check for signals received during or after connecting
	if continue_running:
		collect_and_transmit()
	# Re-check for signals received during collect_and_transmit
	end_time=time.time() + seconds_between_data_collections
	while (time.time() < end_time) and continue_running:
		# Just run mqtt loop while waiting
		mqtt_client.loop(20)

send_output("INFO", "Terminating program")
